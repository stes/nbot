'''
Created on 23.07.2012

@author: stes
'''

from htmlparser import *
from numpy import *
from numpy.linalg import *
from operator import itemgetter
from tools import printlist

def preprocess(text):
    '''
    preprocesses the given text before feeding it to the classification
    system
    '''
    p = re.compile(r'<script.*?</script>', re.DOTALL)
    text = p.sub('', text)
    p = re.compile(r'<a href.*?</a>', re.DOTALL)
    #TODO use some better name for this
    text = p.sub('hyperlinkk', text)
    text = remove_spaces(remove_tags(text))
    text = text.lower()
    p = re.compile(r'[^a-z\s]', re.DOTALL)
    text = p.sub('', text)
    return text

def gen_feature_vector(mask, document):
    '''
    Generates a feature vector by applying the given mask to the specified
    document.
    The feature vector is generated by mapping the words in the mask list to the
    corresponding number of occurrences of these words in the document. Therefore,
    the length of the mask specifies the length of the output list.
    See also: 'Bag-of-words model'
    
    @param mask: a list of words that should be used as the mask
    @param document: the document for which the feature vector should be generated
    
    @return: a list of integers representing occurrences of words in the document
    '''
    processed = preprocess(document)
    vlist = VocabList()
    vlist.expand_with(processed)
    fvector = []
    for word in mask:
        fvector.append(vlist.quantity_of(word))
    return fvector
    

class RecommenderSystem():
    '''
    System to rate new pages and estimate the relevance for the user
    '''

    def __init__(self):
        '''
        Constructor
        '''
    
    def rate(self, document):
        '''
        rates the specified document
        @return: a value between 0 and 1 that specifies how well this
        document suits to the user
        '''
        pass
    
    def set_rate(self, document, rating):
        '''
        Lets the user rate a particular document
        @param rating: The user rating, between 0 (no interest) and 1 (great interest)
        '''
        pass
    
    def train(self, iterations, learnrate):
        '''
        Trains the classifier
        @param iterations: the number of iterations
        @param learnrate: the learning rate
        '''
        pass

class VocabList(): 
    '''
    Vocabulary list used to create a 'bag of words' model out of a given text document.
    '''   
    
    def __init__(self):
        '''
        Constructs a new, empty vocabulary list
        '''
        self.__dict = dict()
    
    def expand_with(self, text):
        '''
        expands the vocabulary list using the specified (preprocessed) text
        @param text: the text whose words should be added to the vocabulary list
        '''
        for word in text.split():
            if self.__dict.has_key(word):
                self.__dict[word] += 1
            else:
                self.__dict[word] = 1
    
    def clean(self, threshold):
        '''
        removes all entries with a quantity less or equals the threshold value
        @param threshold: the threshold
        '''
        rmv = []
        for item in self.__dict:
            if (self.__dict[item] <= threshold):
                rmv.append(item)
        for item in rmv:
            self.__dict.pop(item)
    
    def gen_mask(self):
        '''
        Generates an array with a list of all words in this vocabulary list
        '''
        array = []
        for item in self.sort():
            array.append(item[0])
        return array        
    
    def sort(self):
        '''
        Returns a sorted dictionary containing the elements of this dictionary
        '''
        return sorted(self.__dict.items(), key=itemgetter(1), reverse=True)
    
    def quantity_of(self, word):
        if not self.__dict.has_key(word):
            return 0
        return self.__dict[word]
    
    def __str__(self):
        string = ''
        for item in self.__dict:
            string += "%s : %d\n" % (item, self.__dict[item])
        return string
    
if __name__ == '__main__':
    # some tests
    content = fetch_content('codinghorror.com', '/blog')
    content = preprocess(content)
    tmp = ''
    for c in content:
        tmp+=c
        if len(tmp) > 80:
            print(tmp)
            tmp = ''
    vlist = VocabList()
    vlist.expand_with(content)
    vlist.clean(20)
    print vlist
    vlist.sort()
    print vlist.gen_mask()
    vec = gen_feature_vector(vlist.gen_mask(), "Because of something.")
    print vec